Index: app/src/main/java/com/example/app_vpn/ui/viewmodel/UserViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.app_vpn.ui.viewmodel\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.app_vpn.data.entities.User\r\nimport com.example.app_vpn.data.network.Resource\r\nimport com.example.app_vpn.data.repository.UserRepository\r\nimport com.example.app_vpn.data.repsonses.DataResponse\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.launch\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass UserViewModel @Inject constructor(\r\n    private val userRepository: UserRepository\r\n) : ViewModel() {\r\n\r\n    private val _user = MutableLiveData<Resource<DataResponse<User>>>()\r\n    private val _changePwResponse = MutableLiveData<Resource<DataResponse<User>>>()\r\n\r\n    val user: LiveData<Resource<DataResponse<User>>>\r\n        get() = _user\r\n    val changePwResponse: LiveData<Resource<DataResponse<User>>>\r\n        get() = _changePwResponse\r\n\r\n    fun fetchData(accessToken: String) = viewModelScope.launch {\r\n        _user.value = userRepository.fetchData(accessToken)\r\n    }\r\n\r\n    fun changePassword(\r\n        accessToken: String,\r\n        oldPassword: String,\r\n        newPassword: String\r\n    ) = viewModelScope.launch {\r\n        _changePwResponse.value = Resource.Loading\r\n        _changePwResponse.value =\r\n            userRepository.changePassword(accessToken, oldPassword, newPassword)\r\n    }\r\n\r\n    fun delete(accessToken: String) = viewModelScope.launch {\r\n        userRepository.delete(accessToken)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/app_vpn/ui/viewmodel/UserViewModel.kt b/app/src/main/java/com/example/app_vpn/ui/viewmodel/UserViewModel.kt
--- a/app/src/main/java/com/example/app_vpn/ui/viewmodel/UserViewModel.kt	
+++ b/app/src/main/java/com/example/app_vpn/ui/viewmodel/UserViewModel.kt	
@@ -18,11 +18,11 @@
 ) : ViewModel() {
 
     private val _user = MutableLiveData<Resource<DataResponse<User>>>()
-    private val _changePwResponse = MutableLiveData<Resource<DataResponse<User>>>()
+    private val _changePwResponse = MutableLiveData<Resource<DataResponse<User>>?>()
 
     val user: LiveData<Resource<DataResponse<User>>>
         get() = _user
-    val changePwResponse: LiveData<Resource<DataResponse<User>>>
+    val changePwResponse: MutableLiveData<Resource<DataResponse<User>>?>
         get() = _changePwResponse
 
     fun fetchData(accessToken: String) = viewModelScope.launch {
@@ -39,6 +39,10 @@
             userRepository.changePassword(accessToken, oldPassword, newPassword)
     }
 
+    fun resetChangePwResponse() {
+        _changePwResponse.value = Resource.Loading
+    }
+
     fun delete(accessToken: String) = viewModelScope.launch {
         userRepository.delete(accessToken)
     }
Index: app/src/main/java/com/example/app_vpn/ui/fragment/AccountFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.app_vpn.ui.fragment\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Dialog\r\nimport android.content.Context\r\nimport android.content.res.ColorStateList\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport androidx.core.widget.addTextChangedListener\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout\r\nimport com.example.app_vpn.R\r\nimport com.example.app_vpn.data.entities.User\r\nimport com.example.app_vpn.data.network.Resource\r\nimport com.example.app_vpn.data.preferences.UserPreference\r\nimport com.example.app_vpn.databinding.FragmentAccountBinding\r\nimport com.example.app_vpn.ui.viewmodel.UserViewModel\r\nimport com.example.app_vpn.util.JwtUtils\r\nimport com.example.app_vpn.util.enable\r\nimport com.example.app_vpn.util.handleApiError\r\nimport com.example.app_vpn.util.logout\r\nimport com.github.razir.progressbutton.attachTextChangeAnimator\r\nimport com.github.razir.progressbutton.bindProgressButton\r\nimport com.github.razir.progressbutton.hideProgress\r\nimport com.github.razir.progressbutton.showProgress\r\nimport com.google.android.material.bottomsheet.BottomSheetDialog\r\nimport com.google.android.material.textfield.TextInputEditText\r\nimport com.google.android.material.textfield.TextInputLayout\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlinx.coroutines.launch\r\nimport javax.inject.Inject\r\n\r\n\r\n@AndroidEntryPoint\r\nclass AccountFragment : Fragment() {\r\n    private lateinit var binding: FragmentAccountBinding\r\n\r\n    @Inject\r\n    lateinit var userPreference: UserPreference\r\n\r\n    private val userViewModel by viewModels<UserViewModel>()\r\n\r\n    private lateinit var swipeRefreshLayout: SwipeRefreshLayout\r\n    private val jwtUtils = JwtUtils()\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = FragmentAccountBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        Log.d(\"my_tag\", \"on view create account fragemnt\")\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        swipeRefreshLayout = binding.swiperefresh\r\n\r\n        lifecycleScope.launch {\r\n            fetchData()\r\n        }\r\n\r\n        swipeRefreshLayout.setOnRefreshListener {\r\n            refreshData()\r\n        }\r\n\r\n        userViewModel.user.observe(viewLifecycleOwner) {\r\n            when (it) {\r\n                is Resource.Success -> {\r\n                    updateUI(it.value.data)\r\n                }\r\n\r\n                is Resource.Failure -> {\r\n                    requireActivity().handleApiError(it)\r\n                }\r\n\r\n                is Resource.Loading -> {\r\n                    //shimmer effect\r\n                }\r\n            }\r\n        }\r\n\r\n        binding.btnChangePassword.setOnClickListener {\r\n            val dialog = BottomSheetDialog(requireContext()) // Sử dụng requireContext() thay vì this\r\n            val viewBottomSheetDialog = layoutInflater.inflate(R.layout.dialog_change_password, null)\r\n            dialog.setCancelable(true)\r\n            dialog.setContentView(viewBottomSheetDialog)\r\n            dialog.show()\r\n\r\n            val btnChangePw = viewBottomSheetDialog.findViewById<Button>(R.id.btnChangePw)\r\n            bindProgressButton(btnChangePw)\r\n            btnChangePw.apply {\r\n                attachTextChangeAnimator()\r\n                enable(false)\r\n            }\r\n\r\n            val txtCurrentPassword = viewBottomSheetDialog.findViewById<TextInputEditText>(R.id.txtCurrentPassword)\r\n            val txtNewPassword = viewBottomSheetDialog.findViewById<TextInputEditText>(R.id.txtNewPassword)\r\n\r\n            txtNewPassword.addTextChangedListener {\r\n                btnChangePw.enable(\r\n                    txtCurrentPassword.text.toString().isNotEmpty() &&\r\n                            txtNewPassword.text.toString().isNotEmpty()\r\n                )\r\n            }\r\n\r\n            // Xử lí sự kiện thay đổi password\r\n            btnChangePw.setOnClickListener {\r\n                val currentPassword = txtCurrentPassword.text.toString()\r\n                val newPassword = txtNewPassword.text.toString()\r\n                lifecycleScope.launch {\r\n                    changePassword(currentPassword, newPassword)\r\n                }\r\n            }\r\n\r\n            userViewModel.changePwResponse.observe(viewLifecycleOwner) {\r\n                when (it) {\r\n                    is Resource.Success -> {\r\n                        btnChangePw.hideProgress(R.string.change_password)\r\n                        val responseValue = it.value\r\n                        when (responseValue.isSuccessful) {\r\n                            true -> {\r\n                                dialog.dismiss()\r\n                                showChangePwSuccessDialog(requireContext())\r\n                            }\r\n                            false -> {\r\n                                viewBottomSheetDialog.findViewById<TextInputLayout>(R.id.iplyCurrentPassword).apply {\r\n                                    helperText = responseValue.message\r\n                                    setHelperTextColor(ColorStateList.valueOf(resources.getColor(R.color.red)))\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    is Resource.Failure -> {\r\n                        requireActivity().handleApiError(it)\r\n                        dialog.dismiss()\r\n                    }\r\n                    is Resource.Loading -> {\r\n                        btnChangePw.showProgress() {\r\n                            buttonTextRes = R.string.loading\r\n                            progressColor = Color.WHITE\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        binding.btnLogout.setOnClickListener {\r\n            showLogoutDialog()\r\n        }\r\n    }\r\n\r\n    private fun showLogoutDialog() {\r\n        val dialog = Dialog(requireContext())\r\n        val viewLogoutDialog = layoutInflater.inflate(R.layout.dialog_logout, null)\r\n\r\n        dialog.setCancelable(false)\r\n        dialog.setContentView(viewLogoutDialog)\r\n        dialog.show()\r\n\r\n        val btnLogoutNo = viewLogoutDialog.findViewById<Button>(R.id.btnLogoutNo)\r\n        val btnLogoutYes = viewLogoutDialog.findViewById<Button>(R.id.btnLogoutYes)\r\n\r\n        btnLogoutNo.setOnClickListener {\r\n            dialog.dismiss()\r\n        }\r\n\r\n        btnLogoutYes.setOnClickListener {\r\n            logout()\r\n            dialog.dismiss()\r\n        }\r\n    }\r\n\r\n    private fun showChangePwSuccessDialog(context: Context) {\r\n        val dialog = Dialog(context)\r\n        val viewDialog = layoutInflater.inflate(R.layout.dialog_success, null)\r\n        dialog.setCancelable(false)\r\n        dialog.setContentView(viewDialog)\r\n        dialog.show()\r\n\r\n        val btnDone = viewDialog.findViewById<Button>(R.id.btnDone)\r\n        val txtSuccessText = viewDialog.findViewById<TextView>(R.id.txtSuccessText)\r\n        txtSuccessText.text = \"Change password successful\"\r\n        btnDone.setOnClickListener {\r\n            dialog.dismiss()\r\n        }\r\n    }\r\n\r\n    private fun refreshData() {\r\n        binding.swiperefresh.isRefreshing = false\r\n    }\r\n\r\n    private suspend  fun fetchData() {\r\n        val accessToken = userPreference.getAccessTokenAsString()\r\n        userViewModel.fetchData(accessToken!!)\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    private fun updateUI(user: User) {\r\n        val premiumType = jwtUtils.extractPremiumType(user.premiumKey)\r\n        when (premiumType) {\r\n            \"F\" -> binding.txtPremiumType.text = \"Free\"\r\n            else -> binding.txtPremiumType.text =\r\n                \"Premium. Expire Date: ${jwtUtils.extractExpirationDate(user.premiumKey)}\"\r\n        }\r\n        binding.txtUsername.text = user.username\r\n        binding.txtEmail.text = user.email\r\n\r\n    }\r\n\r\n    private suspend fun changePassword(oldPassword: String, newPassword: String) {\r\n        val accessToken = userPreference.getAccessTokenAsString()\r\n        userViewModel.changePassword(accessToken!!, oldPassword, newPassword)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/app_vpn/ui/fragment/AccountFragment.kt b/app/src/main/java/com/example/app_vpn/ui/fragment/AccountFragment.kt
--- a/app/src/main/java/com/example/app_vpn/ui/fragment/AccountFragment.kt	
+++ b/app/src/main/java/com/example/app_vpn/ui/fragment/AccountFragment.kt	
@@ -12,6 +12,8 @@
 import android.view.ViewGroup
 import android.widget.Button
 import android.widget.TextView
+import androidx.core.view.ViewCompat
+import androidx.core.view.WindowInsetsCompat
 import androidx.core.widget.addTextChangedListener
 import androidx.fragment.app.Fragment
 import androidx.fragment.app.viewModels
@@ -60,9 +62,16 @@
     }
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        Log.d("my_tag", "on view create account fragemnt")
         super.onViewCreated(view, savedInstanceState)
 
+        ViewCompat.setOnApplyWindowInsetsListener(view) { _, insets ->
+            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
+            // Áp dụng insets vào padding của root view của fragment
+            view.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
+            // Trả về insets không thay đổi
+            insets
+        }
+
         swipeRefreshLayout = binding.swiperefresh
 
         lifecycleScope.launch {
@@ -90,6 +99,7 @@
         }
 
         binding.btnChangePassword.setOnClickListener {
+            Log.d("my_tag", "btn change password")
             val dialog = BottomSheetDialog(requireContext()) // Sử dụng requireContext() thay vì this
             val viewBottomSheetDialog = layoutInflater.inflate(R.layout.dialog_change_password, null)
             dialog.setCancelable(true)
@@ -117,8 +127,11 @@
             btnChangePw.setOnClickListener {
                 val currentPassword = txtCurrentPassword.text.toString()
                 val newPassword = txtNewPassword.text.toString()
+                userViewModel.resetChangePwResponse()
+                Log.d("my_tag", userViewModel.changePwResponse.value.toString())
                 lifecycleScope.launch {
                     changePassword(currentPassword, newPassword)
+                    Log.d("my_tag", userViewModel.changePwResponse.value.toString() + 1)
                 }
             }
 
@@ -149,6 +162,9 @@
                             buttonTextRes = R.string.loading
                             progressColor = Color.WHITE
                         }
+                    }
+                    else -> {
+
                     }
                 }
             }
@@ -218,6 +234,7 @@
     }
 
     private suspend fun changePassword(oldPassword: String, newPassword: String) {
+        Log.d("my_tag", "change password")
         val accessToken = userPreference.getAccessTokenAsString()
         userViewModel.changePassword(accessToken!!, oldPassword, newPassword)
     }
Index: app/src/main/res/navigation/nav_auth.xml
===================================================================
diff --git a/app/src/main/res/navigation/nav_auth.xml b/app/src/main/res/navigation/nav_auth.xml
deleted file mode 100644
--- a/app/src/main/res/navigation/nav_auth.xml	
+++ /dev/null	
@@ -1,18 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<navigation xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:id="@+id/nav_auth"
-    app:startDestination="@id/loginActivity">
-
-    <activity
-        android:id="@+id/loginActivity"
-        android:name="com.example.app_vpn.ui.auth.login.LoginActivity"
-        android:label="activity_login"
-        tools:layout="@layout/activity_login" />
-    <activity
-        android:id="@+id/signUpActivity"
-        android:name="com.example.app_vpn.ui.auth.signup.SignUpActivity"
-        android:label="activity_sign_up"
-        tools:layout="@layout/activity_sign_up" />
-</navigation>
\ No newline at end of file
Index: app/src/main/java/com/example/app_vpn/ui/auth/AuthActivity.kt
===================================================================
diff --git a/app/src/main/java/com/example/app_vpn/ui/auth/AuthActivity.kt b/app/src/main/java/com/example/app_vpn/ui/auth/AuthActivity.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/app_vpn/ui/auth/AuthActivity.kt	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package com.example.app_vpn.ui.auth
-
-import android.os.Bundle
-import androidx.activity.enableEdgeToEdge
-import androidx.appcompat.app.AppCompatActivity
-import androidx.core.view.ViewCompat
-import androidx.core.view.WindowInsetsCompat
-import com.example.app_vpn.R
-import dagger.hilt.android.AndroidEntryPoint
-
-@AndroidEntryPoint
-class AuthActivity : AppCompatActivity() {
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_auth)
-    }
-}
\ No newline at end of file
Index: app/src/main/res/layout/activity_auth.xml
===================================================================
diff --git a/app/src/main/res/layout/activity_auth.xml b/app/src/main/res/layout/activity_auth.xml
deleted file mode 100644
--- a/app/src/main/res/layout/activity_auth.xml	
+++ /dev/null	
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:id="@+id/main"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    tools:context=".ui.auth.AuthActivity">
-
-    <androidx.fragment.app.FragmentContainerView
-        android:id="@+id/fragmentAuth"
-        android:name="androidx.navigation.fragment.NavHostFragment"
-        android:layout_width="409dp"
-        android:layout_height="729dp"
-        app:defaultNavHost="true"
-        app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="parent"
-        app:navGraph="@navigation/nav_auth" />
-</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/app_vpn/ui/splashscreen/SplashTheme.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.app_vpn.ui.splashscreen\r\n\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport com.example.app_vpn.ui.MainActivity\r\n\r\nclass SplashTheme : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        Handler().postDelayed({\r\n            var intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)\r\n        },3000)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/app_vpn/ui/splashscreen/SplashTheme.kt b/app/src/main/java/com/example/app_vpn/ui/splashscreen/SplashTheme.kt
--- a/app/src/main/java/com/example/app_vpn/ui/splashscreen/SplashTheme.kt	
+++ b/app/src/main/java/com/example/app_vpn/ui/splashscreen/SplashTheme.kt	
@@ -1,15 +1,18 @@
 package com.example.app_vpn.ui.splashscreen
 
 import android.content.Intent
-import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
 import android.os.Handler
+import android.util.Log
+import androidx.appcompat.app.AppCompatActivity
 import com.example.app_vpn.ui.MainActivity
 
 class SplashTheme : AppCompatActivity() {
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
 
+        Log.d("my_tag", "SplashTheme")
+
         Handler().postDelayed({
             var intent = Intent(this, MainActivity::class.java)
             startActivity(intent)
Index: app/src/main/java/com/example/app_vpn/ui/viewmodel/AuthViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.app_vpn.ui.viewmodel\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.app_vpn.data.entities.Token\r\nimport com.example.app_vpn.data.entities.User\r\nimport com.example.app_vpn.data.network.Resource\r\nimport com.example.app_vpn.data.repository.AuthRepository\r\nimport com.example.app_vpn.data.repsonses.DataResponse\r\nimport com.example.app_vpn.data.repsonses.OtherResponse\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.launch\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass AuthViewModel @Inject constructor(\r\n    private val authRepository: AuthRepository\r\n) : ViewModel() {\r\n    private val _loginResponse: MutableLiveData<Resource<DataResponse<Token>>> = MutableLiveData()\r\n    private val _registerResponse: MutableLiveData<Resource<DataResponse<User>>> = MutableLiveData()\r\n    private val _verifyResponse: MutableLiveData<Resource<OtherResponse>> = MutableLiveData()\r\n    private val _isValidUsernameEmailResponse: MutableLiveData<Resource<OtherResponse>> =\r\n        MutableLiveData()\r\n\r\n    val loginResponse: LiveData<Resource<DataResponse<Token>>>\r\n        get() = _loginResponse\r\n    val registerResponse: LiveData<Resource<DataResponse<User>>>\r\n        get() = _registerResponse\r\n    val verifyResponse: LiveData<Resource<OtherResponse>>\r\n        get() = _verifyResponse\r\n    val isValidUsernameEmailResponse: LiveData<Resource<OtherResponse>>\r\n        get() = _isValidUsernameEmailResponse\r\n\r\n    fun login(\r\n        username: String, password: String\r\n    ) = viewModelScope.launch {\r\n        _loginResponse.value = Resource.Loading\r\n        _loginResponse.value = authRepository.login(username, password)\r\n    }\r\n\r\n    fun register(\r\n        username: String,\r\n        email: String,\r\n        password: String,\r\n    ) = viewModelScope.launch {\r\n        _registerResponse.value = Resource.Loading\r\n        _registerResponse.value = authRepository.register(username, email, password)\r\n    }\r\n\r\n    fun verify(\r\n        email: String, code: String\r\n    ) = viewModelScope.launch {\r\n        _verifyResponse.value = Resource.Loading\r\n        _verifyResponse.value = authRepository.verify(email, code)\r\n    }\r\n\r\n    fun isValidUsernameEmailResponse(\r\n        username: String, email: String\r\n    ) = viewModelScope.launch {\r\n        _isValidUsernameEmailResponse.value = Resource.Loading\r\n        _isValidUsernameEmailResponse.value = authRepository.isValidUsernameEmail(username, email)\r\n    }\r\n\r\n    suspend fun saveAccessTokens(accessToken: String, refreshToken: String) {\r\n        authRepository.saveAccessTokens(accessToken, refreshToken)\r\n    }\r\n\r\n    suspend fun savePremiumKey(premiumKey: String) {\r\n        authRepository.savePremiumKey(premiumKey)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/app_vpn/ui/viewmodel/AuthViewModel.kt b/app/src/main/java/com/example/app_vpn/ui/viewmodel/AuthViewModel.kt
--- a/app/src/main/java/com/example/app_vpn/ui/viewmodel/AuthViewModel.kt	
+++ b/app/src/main/java/com/example/app_vpn/ui/viewmodel/AuthViewModel.kt	
@@ -21,6 +21,7 @@
     private val _loginResponse: MutableLiveData<Resource<DataResponse<Token>>> = MutableLiveData()
     private val _registerResponse: MutableLiveData<Resource<DataResponse<User>>> = MutableLiveData()
     private val _verifyResponse: MutableLiveData<Resource<OtherResponse>> = MutableLiveData()
+    private val _isValidEmail: MutableLiveData<Resource<OtherResponse>> = MutableLiveData()
     private val _isValidUsernameEmailResponse: MutableLiveData<Resource<OtherResponse>> =
         MutableLiveData()
 
@@ -33,6 +34,9 @@
     val isValidUsernameEmailResponse: LiveData<Resource<OtherResponse>>
         get() = _isValidUsernameEmailResponse
 
+    val isValidEmail: LiveData<Resource<OtherResponse>>
+        get() = _isValidEmail
+
     fun login(
         username: String, password: String
     ) = viewModelScope.launch {
@@ -50,19 +54,27 @@
     }
 
     fun verify(
-        email: String, code: String
+        email: String,
+        code: String
     ) = viewModelScope.launch {
         _verifyResponse.value = Resource.Loading
         _verifyResponse.value = authRepository.verify(email, code)
     }
 
-    fun isValidUsernameEmailResponse(
+    fun isValidUsernameEmail(
         username: String, email: String
     ) = viewModelScope.launch {
         _isValidUsernameEmailResponse.value = Resource.Loading
         _isValidUsernameEmailResponse.value = authRepository.isValidUsernameEmail(username, email)
     }
 
+    fun isValidEmail(
+        email: String
+    ) = viewModelScope.launch {
+        _isValidEmail.value = Resource.Loading
+        _isValidEmail.value = authRepository.isValidEmail(email)
+    }
+
     suspend fun saveAccessTokens(accessToken: String, refreshToken: String) {
         authRepository.saveAccessTokens(accessToken, refreshToken)
     }
Index: app/src/main/res/drawable/baseline_arrow_back_ios_new_24.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><vector xmlns:android=\"http://schemas.android.com/apk/res/android\" android:height=\"24dp\" android:tint=\"#000000\" android:viewportHeight=\"24\" android:viewportWidth=\"24\" android:width=\"24dp\">\r\n      \r\n    <path android:fillColor=\"@android:color/white\" android:pathData=\"M17.77,3.77l-1.77,-1.77l-10,10l10,10l1.77,-1.77l-8.23,-8.23z\"/>\r\n    \r\n</vector>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/baseline_arrow_back_ios_new_24.xml b/app/src/main/res/drawable/baseline_arrow_back_ios_new_24.xml
--- a/app/src/main/res/drawable/baseline_arrow_back_ios_new_24.xml	
+++ b/app/src/main/res/drawable/baseline_arrow_back_ios_new_24.xml	
@@ -1,5 +1,12 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
-      
-    <path android:fillColor="@android:color/white" android:pathData="M17.77,3.77l-1.77,-1.77l-10,10l10,10l1.77,-1.77l-8.23,-8.23z"/>
-    
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:tint="#000000"
+    android:viewportHeight="24"
+    android:viewportWidth="24"
+    android:width="24dp">
+
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M17.77,3.77l-1.77,-1.77l-10,10l10,10l1.77,-1.77l-8.23,-8.23z" />
+
 </vector>
Index: app/src/main/java/com/example/app_vpn/ui/splashscreen/SplashScreenActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.app_vpn.ui.splashscreen\r\n\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.ViewCompat\r\nimport androidx.core.view.WindowInsetsCompat\r\nimport com.example.app_vpn.R\r\nimport com.example.app_vpn.ui.MainActivity\r\nimport com.example.app_vpn.util.startNewActivity\r\n\r\nclass SplashScreenActivity : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        enableEdgeToEdge()\r\n        setContentView(R.layout.activity_splash_screen)\r\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->\r\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\r\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\r\n            insets\r\n        }\r\n\r\n        Handler().postDelayed({\r\n            startNewActivity(MainActivity::class.java)\r\n            finish()\r\n        },1500)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/app_vpn/ui/splashscreen/SplashScreenActivity.kt b/app/src/main/java/com/example/app_vpn/ui/splashscreen/SplashScreenActivity.kt
--- a/app/src/main/java/com/example/app_vpn/ui/splashscreen/SplashScreenActivity.kt	
+++ b/app/src/main/java/com/example/app_vpn/ui/splashscreen/SplashScreenActivity.kt	
@@ -1,7 +1,9 @@
 package com.example.app_vpn.ui.splashscreen
 
+import android.annotation.SuppressLint
 import android.os.Bundle
 import android.os.Handler
+import android.util.Log
 import androidx.activity.enableEdgeToEdge
 import androidx.appcompat.app.AppCompatActivity
 import androidx.core.view.ViewCompat
@@ -10,6 +12,7 @@
 import com.example.app_vpn.ui.MainActivity
 import com.example.app_vpn.util.startNewActivity
 
+@SuppressLint("CustomSplashScreen")
 class SplashScreenActivity : AppCompatActivity() {
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
@@ -21,6 +24,8 @@
             insets
         }
 
+        Log.d("my_tag", "splash screen")
+
         Handler().postDelayed({
             startNewActivity(MainActivity::class.java)
             finish()
Index: app/src/main/java/com/example/app_vpn/util/Validate.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.app_vpn.util\r\n\r\nfun String.isValidEmail(): Boolean {\r\n    val regex = \"(?:[a-z0-9!#\\$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#\\$%&'*+/=?^_`{|}~-]+)*|\\\"(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21\\\\x23-\\\\x5b\\\\x5d-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])*\\\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21-\\\\x5a\\\\x53-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])+)\\\\])\"\r\n    return this.matches(regex.toRegex())\r\n}\r\n\r\nfun String.isValidUsername() : Boolean {\r\n    val regex = \"^(?!.*[A-Z])(?!^\\\\d)(?!.*[!@#\\$%^&*(),.?\\\":{}|<>])(?!.*[\\\\u00C0-\\\\u024F\\\\u1E00-\\\\u1EFF]).{6,}\\$\"\r\n    return this.matches(regex.toRegex())\r\n}\r\n\r\nfun String.isValidPassword() : Boolean {\r\n    val regex = \"^\\\\S{6,}\\$\\n\"\r\n    return this.matches(regex.toRegex())\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/app_vpn/util/Validate.kt b/app/src/main/java/com/example/app_vpn/util/Validate.kt
--- a/app/src/main/java/com/example/app_vpn/util/Validate.kt	
+++ b/app/src/main/java/com/example/app_vpn/util/Validate.kt	
@@ -11,6 +11,6 @@
 }
 
 fun String.isValidPassword() : Boolean {
-    val regex = "^\\S{6,}\$\n"
+    val regex = "^\\S{6,}$"
     return this.matches(regex.toRegex())
 }
